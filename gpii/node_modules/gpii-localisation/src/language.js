/*
 * OS Stubs Language
 *
 * Copyright 2020 Raising the Floor -- US Inc. All rights reserved.
 * Copyright 2018 Raising the Floor - International
 *
 * Licensed under the New BSD license. You may not use this file except in
 * compliance with this License.
 *
 * You may obtain a copy of the License at
 * https://github.com/GPII/universal/blob/master/LICENSE.txt
 * 
 * The R&D leading to these results received funding from the
 * Department of Education - Grant H421A150005 (GPII-APCP). However,
 * these results do not necessarily represent the policy of the
 * Department of Education, and you should not assume endorsement by the
 * Federal Government.
 */

"use strict";

var fluid = require("gpii-universal");

var gpii = fluid.registerNamespace("gpii");
var osstubs = fluid.registerNamespace("gpii.osstubs");

fluid.registerNamespace("gpii.osstubs.language");

fluid.defaults("gpii.osstubs.language", {
    gradeNames: ["fluid.component", "fluid.modelComponent"],
    invokers: {
        getInstalledLanguages: {
            funcName: "gpii.osstubs.language.getInstalled",
            args: [ "{that}" ]
        },
        getLanguageNames: {
            funcName: "gpii.osstubs.language.getLanguageNames",
            args: [ "{that}", "{arguments}.0" ]
        },
        getDisplayLanguage: {
            funcName: "gpii.osstubs.language.getDisplayLanguage"
        }
    },
    listeners: {
        "onCreate.update": "{that}.getInstalledLanguages()"
    },
    // The model gets updated whenever getInstalledLanguages is called.
    model: {
        /** @type {Map<String,InstalledLanguage>} */
        installedLanguages: null,
        /** Currently configured display language */
        configuredLanguage: null
    },
    members: {
        /** code=>name map of language names in english */
        englishNames: {}
    }
});

/**
 * Gets the display languages that are installed on the system, and updates the model.
 *
 * These are listed in HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\MUI\UILanguages
 *
 * @param {Component} that The gpii.osstubs.language instance.
 * @return {Promise<Map<String,InstalledLanguage>>} A promise, resolving with either the language names if the list has
 * changed, or null if there was no change.
 */
gpii.osstubs.language.getInstalled = function (that) {
    // NOTE: for OS stubs, we hard-code "en-US" as the one and only installed language
    var langCodes = [
        "en-US"
    ];

    // NOTE: on Windows, we call "gpii.windows.fixCodeCase" to ensure that the language code portion is lowercase and the country code portion
    //       is uppercase; if this is necessary on other new platforms we could include that function here (or refactor it to be cross-platform)
    
    var current = gpii.osstubs.language.getDisplayLanguage();

    // Because this function gets called in the off-chance that the language has changed (maybe multiple times during
    // key-in), and getting the translated languages requires a new process, perform some checks upfront.
    var changed = current !== fluid.get(that.model, "configuredLanguage");
    that.applier.change("configuredLanguage", current);

    if (!changed) {
        var knownLanguages = Object.keys(fluid.get(that.model, "installedLanguages") || {});
        changed = langCodes.length !== knownLanguages.length;
        if (!changed) {
            changed = !knownLanguages.every(function (elem) {
                return langCodes.includes(elem);
            });
        }
    }

    var promise;
    if (changed) {
        // Update the language names only if required.
        promise = that.getLanguageNames(langCodes).then(function (languages) {
            that.applier.change("installedLanguages", languages);
        });
    } else {
        promise = fluid.promise().resolve();
    }

    return promise;
};

/**
 * Gets the language names of the given languages, identified by their IETF language codes (`en`, `es-MX`).
 *
 * It returns an object containing the name in English, the current display language, and native language.
 *
 * If only the language identifier (first 2 characters) are passed, then the language name is returned.
 * If the country code is also given, then the country is also returned in brackets:
 *  - If the country is code is unknown, or the country-specific language isn't recognised, then the language code is
 *     used instead of the country.
 *  - If the language is only spoken in a single country (eg, Bulgarian), then the country is not returned, unless a
 *     different country was passed (eg, bg-GB).
 * If the language is unknown, then an empty string is used. If the language code is invalid, null each field is null.
 *
 * Examples:
 *```
 * "es-MX" => { english: "Spanish (Mexico)", local: "Spanish (Mexico)", native: "Español (México)" }
 * "en" => { english: "English", local: "English", native: "English" }
 * "en-GB" => { "english": "English (United Kingdom)", "local": "English (United Kingdom)", "native": "English (United Kingdom)" }
 *```
 * When the current display language is French:
 * ```
 * "nl-NL" => { english: "Dutch (Netherlands)", local: "Néerlandais (Pays-Bas)", native: "Nederlands (Nederland)" }
 * ```
 * @param {Component} that The gpii.osstubs.language instance.
 * @param {String|Array<String>} langCodes The language code(s), in the form of `lang[-COUNTRY]`.
 * @return {Promise<LanguageNames>} A promise, resolving with the language names.
 */
gpii.osstubs.language.getLanguageNames = function (that, langCodes) {
    var promise = fluid.promise();

    var currentLangCode = gpii.osstubs.language.getDisplayLanguage();

    // resolve each langCode to its english, local and native names
    var languages = {};
    langCodes.forEach(langCode => {
        var languageAndCountryNameInEnglishLocale;
        var languageAndCountryNameInCurrentLocale;
        var languageAndCountryNameInNativeLocale;

        if(langCode == "en-US") {
            // for OS Stubs, we set all three variants to the same text (since we assume only 'en-US' language support in stubs)
            languageAndCountryNameInEnglishLocale = "English (United States)";
            languageAndCountryNameInCurrentLocale = languageAndCountryNameInEnglishLocale;
            languageAndCountryNameInNativeLocale = languageAndCountryNameInEnglishLocale;    
        } else {
            // for OS Stubs, we show an error for any other language/country codes
            languageAndCountryNameInEnglishLocale = "Not implemented";
            languageAndCountryNameInCurrentLocale = languageAndCountryNameInEnglishLocale;
            languageAndCountryNameInNativeLocale = languageAndCountryNameInEnglishLocale;
        }

        languages[langCode] = {
            code: langCode,
            english: languageAndCountryNameInEnglishLocale,
            local: languageAndCountryNameInCurrentLocale,
            native: languageAndCountryNameInNativeLocale
        };

        if (langCode == currentLangCode) {
            languages[langCode].currentLangCode = true;
        };

        // Save the English name
        that.englishNames[langCode] = languageAndCountryNameInEnglishLocale;
    });
    
    promise.resolve(languages);

    return promise;
};

/**
 * Gets the currently configured display language.
 *
 * This is the language which new processes will use.
 *
 * @return {String} The language code of the currently configured display language.
 */
gpii.osstubs.language.getDisplayLanguage = function () {
    // NOTE: for OS stubs, we hard-code "en-US" as the one and only installed language (and therefore as the "current" language as well)
    var langCode = "en-US";
    
    // NOTE: on Windows, we call "gpii.windows.fixCodeCase" to ensure that the language code portion is lowercase and the country code portion
    //       is uppercase; if this is necessary on other new platforms we could include that function here (or refactor it to be cross-platform)

    return langCode;
};

/**
 * Updates the OS's display language, by restarting Finder and other system launch daemons and agents if the language has
 * changed since the last time this was called.
 *
 * @param {String} currentLanguage [optional] The current (new) language.
 * @return {Promise|undefined} Resolves when all daemons/agents have restarted, or null if the language has not changed.
 */
gpii.osstubs.updateLanguage = function (currentLanguage) {
    // not implemented in OS Stubs
    return null;
};
